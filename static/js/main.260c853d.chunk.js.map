{"version":3,"sources":["components/GetMeme.js","components/Navbar.js","components/Home.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["GetMeme","memeDisplay","memes","map","meme","className","src","url","alt","style","width","height","name","href","id","Navbar","useState","Home","setMemes","a","axios","get","response","data","console","log","useEffect","asyncMeme","Post","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSA0BeA,G,MAvBC,SAAC,GAAa,IAEpBC,EAFmB,EAAXC,MAGJC,KAAI,SAAAC,GAAI,OACV,yBAAKC,UAAU,QACX,yBAAKA,UAAU,QAAQC,IAAKF,EAAKG,IAAKC,IAAI,SAASC,MAAO,CAACC,MAAM,MAAOC,OAAO,WAC3E,wBAAIN,UAAU,eAAc,2BAAID,EAAKQ,OACrC,uBAAGC,KAAI,4CAAuCT,EAAKU,IAAMT,UAAU,uBAAnE,oBAMhB,OACI,yBAAKA,UAAU,WAEXJ,KC+BGc,EA/CA,SAAC,GAAY,EAAXb,MAAY,IAAD,EACCc,mBAAS,IADV,6BAoBxB,OACI,6BACI,yBAAKX,UAAU,yBACzB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,eAAeQ,KAAK,KAAjC,oBAYJ,6BACA,gCCbaI,EAvBF,WAAO,IAAD,EACWD,mBAAS,IADpB,mBACRd,EADQ,KACDgB,EADC,iDAOf,8BAAAC,EAAA,sEAC2BC,IAAMC,IAAI,qCADrC,cACUC,EADV,gBAEuBA,EAASC,KAAKA,KAAKrB,MAF1C,OAEUqB,EAFV,OAGIC,QAAQC,IAAIF,GACZL,EAASK,GAJb,4CAPe,sBAcjB,OAXEG,qBAAU,YAHK,mCAIXC,KACF,IAUF,yBAAKtB,UAAU,OACb,gEACA,kBAAC,EAAD,CAAQH,MAAOA,IACf,kBAAC,EAAD,CAASA,MAAOA,M,eCbP0B,EARF,WACT,OACI,6BACI,sDCkBGC,MAlBf,WACE,OACE,6BAEE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,OAAK,EAACC,UAAWf,IAC7C,kBAAC,IAAD,CAAOa,KAAK,qBAAqBC,OAAK,EAACC,UAAWJ,SCDxCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.260c853d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './GetMeme.css'\r\n\r\nconst GetMeme = ({memes}) => {\r\n   \r\n    const memeDisplay = (\r\n        memes.map(meme=>\r\n            <div className=\"card\">\r\n                <img className=\"image\" src={meme.url} alt=\"Avatar\" style={{width:\"70%\", height:\"270px\"}} ></img>\r\n                    <h4 className=\"text-center\"><b>{meme.name}</b></h4>\r\n                    <a href={`https://imgflip.com/memegenerator/${meme.id}`} className=\"btn btn-primary m-5\">Create Meme </a>\r\n                \r\n                </div>\r\n            )\r\n    )\r\n\r\n    return(\r\n        <div className=\"allcard\">            \r\n        { \r\n            memeDisplay\r\n        }\r\n        </div> \r\n    )  \r\n    \r\n}\r\n\r\nexport default GetMeme\r\n","import React,{useState, useEffect} from 'react'\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom'\r\n\r\nconst Navbar = ({memes}) => {\r\n  const [input, setInput]  = useState('')\r\n  \r\n  \r\n\r\n  const changeHandler =(e) =>{\r\n    setInput(e.target.value)\r\n  }\r\n\r\n  // const searchHandler = (e) => {\r\n  //   e.preventDefault()\r\n  //   const required = memes.filter(meme => meme.name === input)\r\n  //   console.log(\"Required : \",required);\r\n    \r\n    \r\n  // }\r\n\r\n  \r\n\r\n  \r\n    return (\r\n        <div >\r\n            <nav className=\"navbar navbar-inverse\">\r\n  <div className=\"container-fluid\">\r\n    <div className=\"navbar-header\">\r\n      <a className=\"navbar-brand\" href=\"#\">Meme Template</a>\r\n    </div>\r\n    {/* <form className=\"navbar-form navbar-right mr-5\" action=\"/action_page.php\">\r\n      <div className=\"form-group\">\r\n        <input type=\"text\" value={input} className=\"form-control\" placeholder=\"Name of your meme\" onChange={changeHandler} name=\"search\"/>\r\n      </div>\r\n      \r\n      <button type=\"submit\" className=\"btn btn-primary\" onClick={searchHandler}>Search</button>\r\n      \r\n    </form> */}\r\n  </div>\r\n  </nav>\r\n  <br></br>\r\n  <div>\r\n  \r\n  </div>\r\n  \r\n  </div>\r\n  \r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import axios from 'axios'\r\nimport React, {useState, useEffect} from 'react'\r\nimport GetMeme from './GetMeme'\r\nimport Navbar from './Navbar';\r\n\r\nconst Home = () => {\r\n    const [memes, setMemes] = useState([])\r\n\r\n    useEffect(()=>{\r\n        asyncMeme()\r\n    },[])\r\n    \r\n    async function asyncMeme(){\r\n        const response = await axios.get('https://api.imgflip.com/get_memes')\r\n        const data = await response.data.data.memes\r\n        console.log(data)\r\n        setMemes(data)\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Get your favourite Meme Template</h1>\r\n      <Navbar memes={memes} />\r\n      <GetMeme memes={memes}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nconst Post = () => {\r\n    return (\r\n        <div>\r\n            <h1>Posted meme template</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\nimport Home from './components/Home';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Post from './components/Post';\n\nfunction App() {\n  return(\n    <div>\n\n      <Router>\n        <div>\n          <Switch>\n          <Route path='/memetemplate' exact component={Home}/>\n          <Route path='/memetemplate/post' exact component={Post}/>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n\n   \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}